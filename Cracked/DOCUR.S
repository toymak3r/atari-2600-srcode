;***************************************************************
;
;	Cursor Logic and ... and ... ... ... and ....
;
;
;
;***************************************************************
docursor:
DOC:
	STA	W_SIZE
	LSR
	STA	HALF_SIZE	;SIZE/2 -- CENTER OF CURSOR
	lda	INTIM
	cmp	#6
	bcs	cstart
NOTIME:
	rts

;	lda	FRMCNTH
;	and	#7
;	tay
;	iny
;	lda	@TOPKER(Y)
;	sta	W_VPOS
	

cstart:	LDY	#0		;vpos is current vertical screen coordinate
	LDA	@TOPKER(Y)	;NUMBER OF KERNALS ON SCREEN 
	TAY

.LOOP:	DEY			;STARTING FROM BOTTOM KERNAL, COUNTING BACKWARDS
	LDA	@TOPKER(Y)	;FROM THE Nth KERNAL TO THE 1st KERNAL
	CMP	R_VPOS		;FIND FIRST KERNAL SUCH THAT
	BCC	.LOOP		;KERNAL START > VPOS
				;A IS START OF LOWEST KERNAL CONTAINING OBJECT
	SBC	R_VPOS		;CALCULATE DISTANCE FROM BOTTOM OF OBJECT
	STA	W_KOFFSET	;TO TOP OF KERNAL
	DEY			;
	STY	FIRST_KERNAL	;SAVE KERNAL NUMBER
	TYA			;CALCULATE OFFSET INTO KERSIZETBL FROM
	LDY	#0		;TOPKER
	CLC			;
	ADC	@TOPKER(Y)	;
	TAY			;
	INY			;I WANT A ZERO AT THE START OF THE TABLE DEH
	LDA	@TOPKER(Y)	;SIZE OF CURRENT KERNAL
	SEC			
	SBC	R_KOFFSET	;DISTANCE FROM BOT OF OBJECT TO TOP OF KERNAL
	STA	W_DIST		;DISTANCE FROM BOT OF KERNAL TO BOT OF OBJECT


	LDA	R_SCREEN
	CMP	#INRANCHSCREEN
	BNE	.NOPER
	lda	GFLG1
	AND	#$40
	BNE	.NEX
	JMP	.EXIT
.NEX:
	sec			;gyration necessitated by the reverse
	LDA	#6		;ordering of the SIDECURSOR1 array
	sbc	FIRST_KERNAL	;ROOSTER SCREEN VERTICAL POINTER POINTER TABLES	
		
	TAY			;ARE 1 BYTE / ENTRY, EXCEPT WORD FIRST ENTRY
	
	lda	r_splat_hold
	bne	.epon

	JMP	.EXIT

.epon:

	LDA	#(SPLATSIZET & $FF)
	SEC
	SBC	R_DIST
	STA	Y,SPLATSIZE1

	LDA	#(SPLATHMOVET & $FF)
	SEC
	SBC	R_DIST
	STA	Y,SPLATHMOVE1
	JMP	.RSPAN?


.RSPAN?:CPY	#6		;IF WE'RE IN TOP KERNAL, NOTHING TO SPAN TO
	BNE	.GORT
	JMP	.EXIT


.NOPER:	LDA	R_KOFFSET		;IF KOFFSET >= SIZE/2 THEN BULLSEYE
	CMP	HALF_SIZE	;IS IN CURRENT KERNAL
	BCC	.NOPE

	LDA	FIRST_KERNAL	;THE OFFSET TO CENTER OF CURSOR FROM
	STA	W_BKER		;BOTTOM OF KERNAL IS

	LDA	R_DIST		;DIST + HALF_SIZE
	CLC			;ENCROIABLE, N'CEST PAS?
	ADC	HALF_SIZE
	STA	W_BULLSEYE


.NOPE:	LDA	FIRST_KERNAL	;CURSOR/FALLING EGG POINTER TABLES	
	ASL			;ARE 2 BYTES / ENTRY
	TAY
	
	LDA	R_SIZE		;IF SIZE = CURSIZE THE OBJECT IS CURSOR
	CMP	#CURSIZE		;OTHERWISE IS FALLING EGG
	BNE	.FEGG

	LDA	R_EGG_IN_CUR
	BPL	.NOEGG
	lda	FRMCNT
	and	#$08
	bne	.ccc
	STAI	$FF,AUDV1
	STAI	BLACK,COLUP0
	jmp	.ddd	
.ccc:	STAI	0,AUDV1
	STAI	GREY,COLUP0
.ddd:	LDA	#(EGGCURS & $FF)
	LDX	#(EGGCURS & $FF00)/256
	JMP	.CALC

.NOEGG:	STAI	WHITE,COLUP0
	LDA	#(CURSOR & $FF)		;LOAD CURSOR START ADDRESS IN 
	LDX	#(CURSOR & $FF00)/256	;APPROPRIATE CURSOR POINTER
.CALC:	SEC			
	SBC	R_DIST			;AND ADJUST FOR VERTICAL OFFSET
	STA	Y,CURSOR1	
;	TXA
	STX	Y,CURSOR1+1

	JMP	.SPAN?

.FEGG:	LDA	#(EGGTABLE & $FF)
	LDX	#(EGGTABLE & $FF00)/256
	SEC
	SBC	R_DIST
	STA	Y,FALLINGEGG1
;	TXA
	STX	Y,FALLINGEGG1+1

.SPAN?:	CPY	#1		;IF WE'RE IN TOP KERNAL, NOTHING TO SPAN TO
	BNE	.GORT
	JMP	.EXIT


.GORT:;	sec
	LDA	R_SIZE		;IF DISTANCE FROM BOTTOM OF OBJECT TO TOP
	cmp	R_KOFFSET		;OF KERNAL > SIZE OF OBJECT THEN EXIT 
;	beq	.drts
	bcs  	.KLATU		;OTHERWISE OBJECT SPANS KERNALS
.drts:
	JMP	.EXIT

.KLATU:
	LDA	R_SIZE		;SIZE OF OBJECT - AMOUNT OF OBJECT IN FIRST
	SBC	R_KOFFSET		;KERNAL = AMOUNT OF OBJECT PROTRUDING INTO
	STA	W_SPAMT		;NEXT KERNAL -- THE SPan AMounT -- SPAMT

	LDY	FIRST_KERNAL	;KERNAL INDEX - FIRST KERNAL
	DEY			;SECOND KERNAL

;	TYA
;	ASL			;TWO BYTES / ENTRY IN ADDRESS TABLE
;	TAY
	STY	TEMP3		;SAVE Y CURSOR OFFSET
	
	LDA	HALF_SIZE		;SIZE/2 -- CENTER OF CURSOR
	SEC
	SBC 	W_KOFFSET
	STA	TEMP4		;SIZE/2 - KOFFSET

;	LDY	FIRST_KERNAL	;FIRST KERNAL
;	DEY			;SECOND KERNAL -- = TEMP3, ALREADY IN A
	TYA
	LDY	#0
	CLC
	ADC	@TOPKER(Y)	;CALCULATE OFFSET INTO KERNAL SIZE TABLE

	TAY
	INY			;I WANT A ZERO AT THE START OF THE TABLE DEH
	LDA	TEMP4		;IF SIZE/2 - KOFFSET >= SIZE OF SECOND KERNAL
	CMP	@TOPKER(Y)	;THEN CENTER OF CURSOR IS IN THIRD KERNAL
	BCC	.INKER2

	LDA	R_KOFFSET		;IF CENTER OF CURSOR IS IN THIRD KERNAL
	CLC			;THEN BULLSEYE = SIZE/2 -
	ADC	@TOPKER(Y)	;(SIZE OF SECOND KERNAL + KOFFSET)
	STA	TEMP5		
	LDA	HALF_SIZE	;BKER = THIRD KERNAL
	SEC			;THAT'S WHAT THIS BLOCK IS ABOUT
	SBC	TEMP5
	STA	W_BULLSEYE

	LDY	TEMP3		;FIRST_KERNAL
;	DEY
	DEY
	STY	W_BKER
	JMP	.RRESY

.INKER2:LDY	FIRST_KERNAL		;IF CENTER OF CURSOR IS IN SECOND KERNAL
	DEY			;THEN BKER = SECOND KERNAL AND
	STY	W_BKER		;BULLSEYE = SIZE/2 - KOFFSET

	LDA	HALF_SIZE
	SEC
	SBC	R_KOFFSET
	STA	W_BULLSEYE

.RRESY:	LDA	R_SCREEN
	CMP	#INRANCHSCREEN
	BNE	.RESY
	sec
	lda	#6
	sbc	TEMP3
	tay

	LDA	#(SPLATSIZET & $FF)
	CLC			;BACK UP DISPLAY OF CURSOR IN SECOND KERNAL
	ADC	R_KOFFSET		;BY AMOUNT OF CURSOR DISPLAYED IN FIRST KERNAL 
	STA	Y,SPLATSIZE1	; - 1 TO DISPLAY CORRECT AMOUNT OF CURSOR IN 

	LDA	#(SPLATHMOVET & $FF)
	CLC			;BACK UP DISPLAY OF CURSOR IN SECOND KERNAL
	ADC	R_KOFFSET		;BY AMOUNT OF CURSOR DISPLAYED IN FIRST KERNAL 
	STA	Y,SPLATHMOVE1	; - 1 TO DISPLAY CORRECT AMOUNT OF CURSOR IN 
	JMP	.EXIT


.RESY:	LDA	TEMP3
	ASL
	TAY

	LDA	R_SIZE		;CURSOR OR EGG?
	CMP	#CURSIZE	
	BNE	.FEGG2

	LDA	R_EGG_IN_CUR
	BPL	.NOEGG1
	
	LDA	#(EGGCURS & $FF)
	LDX	#(EGGCURS & $FF00)/256
	JMP	.CALC1

.NOEGG1:LDA	#(CURSOR & $FF)
	LDX	#(CURSOR & $FF00)/256
.CALC1:	CLC			;BACK UP DISPLAY OF CURSOR IN SECOND KERNAL
	ADC	R_KOFFSET		;BY AMOUNT OF CURSOR DISPLAYED IN FIRST KERNAL 
	STA	Y,CURSOR1	; - 1 TO DISPLAY CORRECT AMOUNT OF CURSOR IN 
;	TXA
	STX	Y,CURSOR1+1

	JMP	.SP3?		;AND CHECK TO SEE IF A THIRD KERNAL IS SPANNED

.FEGG2:	LDA	#(EGGTABLE & $FF)
	LDX	#(EGGTABLE & $FF00)/256
	CLC
	ADC	R_KOFFSET
	STA	Y,FALLINGEGG1
;	TXA	
	STX	Y,FALLINGEGG1+1

.SP3?:	LDA	FIRST_KERNAL	;FIRST KERNAL CONTAINING CURSOR
	LDY	#0		;SECOND KERNAL - CURSOR SPANS
	CLC
	ADC	@TOPKER(Y)
	TAY			;FIRST KERNAL OFFSET -- KERNAL SIZE TABLE
;	DEY			;SECOND KERNAL OFFSET
		;I WANT A ZERO AT THE START OF THE TABLE DEH SO  ITOOK
		;OUT THE DEY
	LDA	@TOPKER(Y)	;IF SPAMT > SECOND KERNAL SIZE
	CMP	R_SPAMT		;THEN 3 KERNALS ARE SPANNED
	BCS	.EXIT		
				;SIZE OF SECOND KERNAL + AMOUNT OF CURSOR
	ADC	R_KOFFSET		;IN FIRST KERNAL = AMOUNT OF CURSOR 
	STA	W_SPAMT		;DISPLAYED IN PREVIOUS KERNALS

	LDY	TEMP3
;	DEY			;SECOND KERNAL
	DEY			;THIRD KERNAL -- EGG CAN'T SPAN 3 KERNALS
;	BNE	.ON		;SO ONLY HAVE TO DO CURSOR
;	JMP	.error

.ON:	TYA
	ASL			;ADJUST INDEX FOR ADDRESS TABLE
	TAY

	LDA	R_EGG_IN_CUR
	BPL	.NOEGG2	
	
	LDA	#(EGGCURS & $FF)
	LDX	#(EGGCURS & $FF00)/256
	JMP	.CALC2

.NOEGG2:LDA	#(CURSOR & $FF)
	LDX	#(CURSOR & $FF00)/256
.CALC2:	CLC			;ADJUST CURSOR DISPLAY IN THIRD KERNAL BY
	ADC	R_SPAMT		;AMOUNT OF CURSOR PROTRUDING INTO IT
	STA	Y,CURSOR1
;	TXA
	STX	Y,CURSOR1+1
.EXIT:
	
	LDA	R_SCREEN
	CMP	#INRANCHSCREEN
	BEQ	RANCHCURSET

	rts

;****************************************************************************
;
;
;	Cursor for the ranch screen .....
;
;
;****************************************************************************


RANCHCURSET:
RCS:
	LDA	VOFFSET
;	CLC
;	ADC	#14
	CMP	#$89
	BCC	.OKH
	LDA	#$89
.OKH:	STA	W_VPOS


	LDX	#6
.FSGO:	lda	#(SIDECURTAB & $FF)
	sta	x,SIDECURSOR1
	DEX
	BPL	.FSGO

	lda	#SIDECURSIZE		;MOVE SIDE CURSOR
	sta	W_SIZE
	LDA	R_VPOS
	SEC
	SBC	#14
	LDX	#7
.LOOP:	DEX
	STA	TEMP0
	SEC
	SBC	X,SKERSIZE
	BCS	.LOOP
	STX	TEMP1
	LDA	#6
	SEC
	SBC	TEMP1
	TAX
	LDA	#SIDECUR &$FF
	SEC
	SBC	TEMP0
	STA	X,SIDECURSOR1
	LDA	TEMP0
	LDX	TEMP1
	SEC
	SBC	X,SKERSIZE
	DEX
	STA	TEMP0
	STX	TEMP1
	LDA	#6
	SEC
	SBC	TEMP1
	TAX
	LDA	#SIDECUR &$FF
	SEC
	SBC	TEMP0
	STA	X,SIDECURSOR1
	RTS
